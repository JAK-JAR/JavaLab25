PoÅ‚Ä…czenie z bazÄ… danych

W Javie uÅ¼ywa siÄ™ JDBC (Java Database Connectivity).

Potrzebna jest biblioteka JDBC dla Twojej bazy (np. SQLite, MySQL, PostgreSQL).

Tworzymy poÅ‚Ä…czenie:

Connection conn = DriverManager.getConnection("jdbc:sqlite:mydb.db");


ğŸ“Œ To tworzy poÅ‚Ä…czenie z plikiem mydb.db w SQLite.

2. Wykonywanie zapytaÅ„ â€“ Statement

Do prostych zapytaÅ„ moÅ¼na uÅ¼yÄ‡ Statement:

Statement st = conn.createStatement();
ResultSet rs = st.executeQuery("SELECT * FROM users");


executeQuery(sql) â€“ do SELECT (zwraca wynik w ResultSet).

executeUpdate(sql) â€“ do INSERT, UPDATE, DELETE (zwraca liczbÄ™ zmodyfikowanych wierszy).

3. PreparedStatement â€“ bezpieczne zapytania

NajczÄ™Å›ciej uÅ¼ywana i bardzo waÅ¼na klasa.
Pozwala wstawiaÄ‡ parametry ? do SQL, zamiast rÄ™cznie budowaÄ‡ stringa.

PrzykÅ‚ad logowania:

PreparedStatement st = conn.prepareStatement(
    "SELECT * FROM users WHERE login = ? AND password = ?"
);
st.setString(1, "admin");
st.setString(2, "1234");
ResultSet rs = st.executeQuery();


âœ… Zalety:

Chroni przed SQL Injection.

MoÅ¼na wielokrotnie wykonywaÄ‡ zapytanie z rÃ³Å¼nymi parametrami.

Kod jest czytelniejszy.

4. ResultSet â€“ czytanie wynikÃ³w

ResultSet to obiekt, w ktÃ³rym sÄ… wyniki SELECT-a.

while (rs.next()) {
    String login = rs.getString("login");
    int points = rs.getInt("points");
    System.out.println(login + " â†’ " + points);
}


rs.next() â€“ przechodzi do kolejnego wiersza.

getString("kolumna"), getInt("kolumna") â€“ pobierajÄ… wartoÅ›ci.

5. Transakcje

DomyÅ›lnie kaÅ¼da zmiana w bazie wykonuje siÄ™ od razu.
Ale moÅ¼na grupowaÄ‡ kilka operacji w jednÄ… transakcjÄ™:

conn.setAutoCommit(false);

try {
    // wiele zapytaÅ„
    conn.commit();  // zatwierdÅº
} catch (SQLException e) {
    conn.rollback();  // wycofaj
}


ğŸ“Œ Przydatne, gdy np. chcesz przenieÅ›Ä‡ punkty z jednego gracza do drugiego i upewniÄ‡ siÄ™, Å¼e obie zmiany wejdÄ… razem.