Przydatne klasy i funkcje w Javie
1. PreparedStatement

Jak wyÅ¼ej â€“ najwaÅ¼niejsza klasa do SQL w Javie.
UÅ¼ywasz jej zamiast sklejaÄ‡ stringi.
ğŸ‘‰ GÅ‚Ã³wne metody:

setString(int, String) â€“ wstawia tekst.

setInt(int, int) â€“ wstawia liczbÄ™.

executeQuery() â€“ SELECT.

executeUpdate() â€“ INSERT/UPDATE/DELETE.

2. StringBuilder

W Javie stringi sÄ… niezmienne (immutable).
JeÅ›li robisz duÅ¼o konkatenacji (text = text + "coÅ›"), to jest nieefektywne.
Do tego uÅ¼ywamy StringBuilder:

StringBuilder sb = new StringBuilder();
sb.append("Hello ");
sb.append("World!");
String result = sb.toString();


âœ… DuÅ¼o szybsze i lepsze, gdy tworzysz duÅ¼e stringi (np. generujesz raporty, budujesz zapytania SQL, tworzysz plik).

3. Map, List, Set

Przy bazach danych bardzo przydatne sÄ… kolekcje:

List â€“ lista wynikÃ³w.

Map â€“ np. ranking graczy (login â†’ punkty).

Set â€“ zbiÃ³r unikalnych wartoÅ›ci.

PrzykÅ‚ad rankingu z bazy:

Map<String, Integer> leaderboard = new LinkedHashMap<>();
while (rs.next()) {
    leaderboard.put(rs.getString("login"), rs.getInt("points"));
}

4. try-with-resources

Å»eby nie trzeba byÅ‚o rÄ™cznie zamykaÄ‡ poÅ‚Ä…czeÅ„ (conn.close(), st.close()), uÅ¼ywa siÄ™:

try (PreparedStatement st = conn.prepareStatement("SELECT * FROM users")) {
    ResultSet rs = st.executeQuery();
    // ...
} catch (SQLException e) {
    e.printStackTrace();
}


ğŸ“Œ Automatycznie zamknie zasoby po zakoÅ„czeniu bloku.

5. Logger zamiast System.out

Do wiÄ™kszych projektÃ³w zamiast System.out.println uÅ¼ywa siÄ™ Logger.

import java.util.logging.Logger;

Logger logger = Logger.getLogger("MyServer");
logger.info("Serwer uruchomiony!");
logger.warning("BÅ‚Ä…d logowania!");


DziÄ™ki temu logi moÅ¼na filtrowaÄ‡ i zapisywaÄ‡ do pliku.